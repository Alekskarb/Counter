{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","currentTarget","value","setMaxValue","maxData","invalidMaxValue","Number","setStartValue","startData","invalidStartValue","Display","state","invalidDisplayValues","setSwitch","startDisplay","ButtonS","disabled","switch","onClick","setData","title","App","newStartValue","minimum","maxValue","setState","StartInputSwitch","startValue","maximum","MaxInputSwitch","setValue","upSwitch","resetSwitch","saveState","localStorage","setItem","JSON","stringify","addValue","values","deleteValue","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3494e8d6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);};\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = event.currentTarget.value;\r\n        props.setMaxValue(newValue);}\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <span>max value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeMaxValue}\r\n                       value={props.maxData} className={props.invalidMaxValue}/>\r\n            </div>\r\n            <span>start value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeStartValue}\r\n                       value={props.startData} className={props.invalidStartValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props, state) => {\r\n\r\n    // let invalidDisplayValues = +props.startDisplay === +props.maxValue ? 'displayError' : '';\r\n\r\n    return (\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.setSwitch ? <h1>{props.startDisplay} </h1> : \"enter values\"}\r\n            </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n        <div className=\"button\">\r\n                <button disabled={props.switch} onClick={props.setData}>\r\n                    {props.title}\r\n                </button>\r\n        </div>\r\n    );\r\n}\r\nexport default ButtonS;","import React from 'react';\nimport './App.css';\n\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startValue: 1,\n            maxValue: 5,\n            StartInputSwitch: false,\n            MaxInputSwitch: false,\n            upSwitch: true,\n            resetSwitch: true,\n            setSwitch: false,\n            invalidDisplayValues: false\n        };\n    }\n    newStartValue = 0;\n\n    setStartValue = (minimum) => {\n\n        if (minimum <= 0 || minimum > this.state.maxValue) {\n            this.setState({\n                StartInputSwitch: true\n            })\n        } else {\n            this.setState({\n                startValue: minimum,\n                StartInputSwitch: false\n            })\n        }\n    }\n\n    setMaxValue = (maximum) => {\n        if (this.state.maxValue >= 0 && this.state.maxValue !== this.state.startValue) {\n            this.setState({maxValue: maximum})\n        } else {\n            this.setState({MaxInputSwitch: true})\n        }\n    };\n\n    setValue = () => {\n        this.setState({\n            StartInputSwitch: true,\n            MaxInputSwitch: true,\n            upSwitch: false,\n            resetSwitch: false,\n            setSwitch: true,\n            newStartValue: this.state.startValue\n        })\n    };\n\n    componentDidMount() {\n        this.saveState()\n    };\n\n    saveState = (state) => {\n        localStorage.setItem('state', JSON.stringify(state))\n    }\n\n    addValue = (values) => {\n        if (this.state.newStartValue < this.state.maxValue) {\n            this.setState({\n                newStartValue: Number(this.state.newStartValue) + 1,\n                upSwitch: false,\n                invalidDisplayValues: false\n            })\n        } else {\n            this.setState({upSwitch: true,\n                invalidDisplayValues: true})\n        }\n    }\n\n    deleteValue = () => {\n        this.setState({\n            newStartValue: this.state.startValue,\n            resetSwitch: true,\n            upSwitch: true,\n            StartInputSwitch: false,\n            MaxInputSwitch: false,\n            setSwitch: false,\n            invalidDisplayValues: false\n        });\n    };\n\n    render() {\n\n        let invalidMaxValue = this.state.MaxInputSwitch ? 'maxError' : '';\n        let invalidStartValue = this.state.StartInputSwitch ? 'startError' : '';\n        let invalidDisplayValues = this.state.invalidDisplayValues ? 'displayError' : '';\n\n        return (\n            <div className='wrapper'>\n                <div className='menu'>\n                    <Menu setStartValue={this.setStartValue}\n                          setMaxValue={this.setMaxValue}\n                          startData={this.state.startValue}\n                          maxData={this.state.maxValue}\n                          invalidMaxValue={invalidMaxValue}\n                          invalidStartValue={invalidStartValue}/>\n\n                    <ButtonS setData={this.setValue} title='SET'\n                             switch={this.state.setSwitch}/>\n                </div>\n                <div className='display'>\n\n                    <Display startDisplay={this.state.newStartValue}\n                             setSwitch={this.state.setSwitch}\n                             invalidDisplayValues={invalidDisplayValues}/>\n\n                        <ButtonS setData={this.addValue} title='UP'\n                                 switch={this.state.upSwitch}/>\n\n                        <ButtonS setData={this.deleteValue} title='RESET'\n                                 switch={this.state.resetSwitch}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}