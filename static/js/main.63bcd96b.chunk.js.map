{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","currentTarget","value","setMaxValue","disabled","maxInputSwitch","maxData","invalidMaxValue","Number","setStartValue","startInputSwitch","startData","invalidStartValue","Display","invalidDisplayValues","setSwitch","startDisplay","ButtonS","switch","onClick","setData","title","App","newStartValue","minimum","state","maxValue","setState","startValue","maximum","setValue","upSwitch","resetSwitch","saveState","stateToString","JSON","stringify","localStorage","setItem","restoreState","stringToState","getItem","parse","addValue","values","deleteValue","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.63bcd96b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);};\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = event.currentTarget.value;\r\n        props.setMaxValue(newValue);}\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span className='button'>max value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeMaxValue} disabled={props.maxInputSwitch}\r\n                       value={props.maxData} className={props.invalidMaxValue}/>\r\n            </div>\r\n            <span className='button'>start value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeStartValue} disabled={props.startInputSwitch}\r\n                       value={props.startData} className={props.invalidStartValue} />\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div className='text'>\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.setSwitch ? <span> {props.startDisplay} </span> :\r\n                   props.startInputSwitch || props.maxInputSwitch ?  <span> correct </span> :\r\n                    <span> set values</span> }\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n                <button className=\"button\" disabled={props.switch} onClick={props.setData}>\r\n                    {props.title}\r\n                </button>\r\n    );\r\n}\r\nexport default ButtonS;","import React from 'react';\nimport './App.css';\n\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startValue: 0,\n            maxValue: 5,\n            startInputSwitch: false,\n            maxInputSwitch: false,\n            setSwitch: false,\n            upSwitch: true,\n            resetSwitch: true,\n            invalidDisplayValues: false\n        };\n    }\n    newStartValue = 0;\n\n    setStartValue = (minimum) => {\n\n        if (minimum < 0 || minimum > this.state.maxValue) {\n            this.setState({\n                startInputSwitch: true, setSwitch: true\n            })\n        } else {\n            this.setState({\n                startValue: minimum,\n                startInputSwitch: false,\n                setSwitch: false,\n                maxInputSwitch: false\n            })\n        }\n    }\n\n    setMaxValue = (maximum) => {\n        if (maximum < 0 || maximum < this.state.startValue) {\n            this.setState({maxInputSwitch: true, setSwitch: true})\n        } else {\n            this.setState({\n                maxValue: maximum,\n                setSwitch: false,\n                maxInputSwitch: false,\n                startInputSwitch: false,})\n        }\n    };\n\n    setValue = () => {\n        this.setState({\n            startInputSwitch: true,\n            maxInputSwitch: true,\n            upSwitch: false,\n            resetSwitch: false,\n            setSwitch: true,\n            newStartValue: this.state.startValue},() =>{this.saveState() })\n    };\n\n    componentDidMount() {\n        this.restoreState()\n    };\n\n    saveState = (state) => {\n        let stateToString = JSON.stringify(this.state);\n        localStorage.setItem('store', stateToString)\n    }\n\n    restoreState =()=> {let state = {}, stringToState = localStorage.getItem('store');\n        if (stringToState != null) {state = JSON.parse(stringToState)} this.setState(state)\n    }\n\n    addValue = (values) => {\n        if (this.state.newStartValue < this.state.maxValue) {\n            this.setState({\n                newStartValue: Number(this.state.newStartValue) + 1,\n                upSwitch: false,\n                invalidDisplayValues: false,})\n        } else {\n            this.setState({\n                upSwitch: true,\n                invalidDisplayValues: true,\n                maxInputSwitch: false,\n                startInputSwitch: false,})\n        }\n    }\n\n    deleteValue = () => {\n        this.setState({\n            startValue: 0,\n            maxValue: 5,\n            newStartValue: 0,\n            upSwitch: true,\n            startInputSwitch: false,\n            maxInputSwitch: false,\n            setSwitch: false,\n            invalidDisplayValues: false\n        });\n    };\n\n    render() {\n\n        let invalidMaxValue = this.state.maxInputSwitch ? 'maxError' : '';\n        let invalidStartValue = this.state.startInputSwitch ? 'startError' : '';\n        let invalidDisplayValues = this.state.invalidDisplayValues ? 'displayError' : '';\n\n        return (\n            <div className='wrapper'>\n                <div className='menu'>\n                    <Menu setStartValue={this.setStartValue}\n                          setMaxValue={this.setMaxValue}\n                          startData={this.state.startValue}\n                          maxData={this.state.maxValue}\n                          invalidMaxValue={invalidMaxValue}\n                          invalidStartValue={invalidStartValue}\n                          startInputSwitch={this.state.startInputSwitch}\n                          maxInputSwitch={this.state.maxInputSwitch}  />\n\n                    <ButtonS setData={this.setValue} title='SET'\n                             switch={this.state.setSwitch}/>\n                </div>\n                <div className='display'>\n\n                    <Display startDisplay={this.state.newStartValue}\n                             setSwitch={this.state.setSwitch}\n                             invalidDisplayValues={invalidDisplayValues}\n                             startInputSwitch={this.state.startInputSwitch}\n                             maxInputSwitch={this.state.maxInputSwitch}/>\n\n                       <div className='displayButton'>\n                           <ButtonS setData={this.addValue} title='UP'\n                                 switch={this.state.upSwitch}/>\n\n                        <ButtonS setData={this.deleteValue} title='RESET'\n                                 switch={this.state.resetSwitch}\n                        />\n                       </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}