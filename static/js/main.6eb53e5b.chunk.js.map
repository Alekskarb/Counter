{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/ButtonS.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","currentTarget","value","setMaxValue","maxData","invalidValue","Number","setStartValue","startData","onClick","setValue","disabled","isButtonSetDisabled","Display","isDataSet","startDisplay","ButtonS","switch","setData","title","App","minimum","state","maxValue","setState","inputSwitch","startValue","maximum","buttonSwitch","newStartValue","saveState","localStorage","setItem","JSON","stringify","addValue","values","deleteValue","activateEditMode","deactivatedEditMode","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6eb53e5b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu =(props)=> {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);};\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = event.currentTarget.value;\r\n        props.setMaxValue(newValue);}\r\n\r\n    return (\r\n        <div className=\"input\">\r\n            <span>max value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeMaxValue}\r\n                       value={props.maxData} className={props.invalidValue}/>\r\n            </div>\r\n            <br/>\r\n            <span>start value</span>\r\n            <div>\r\n                <input type=\"number\" onChange={changeStartValue}\r\n                       value={props.startData} className={props.invalidValue}\r\n                />\r\n            </div>\r\n            <button onClick={props.setValue} disabled={props.isButtonSetDisabled}>Set</button>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n    return (\r\n        <div className=\"display\">\r\n            {\r\n                props.isDataSet ? <h1>{props.startDisplay} </h1> : \"enter values\"\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst ButtonS = (props) => {\r\n\r\n    return (\r\n        <div className=\"set\">\r\n                <button disabled={props.switch} onClick={props.setData}  >\r\n                    {props.title}\r\n                </button>\r\n        </div>\r\n    );\r\n}\r\nexport default ButtonS;","import React from 'react';\nimport './App.css';\n\nimport Menu from \"./comps/Menu\";\nimport Display from \"./comps/Display\";\nimport ButtonS from \"./comps/ButtonS\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            startValue: 1,\n            maxValue: 5,\n            newStartValue: 0,\n            title: ['SET', 'UP', 'RESET'],\n            buttonSwitch: false,\n            inputSwitch: false,\n            isDataSet: false,\n            isButtonSetDisabled: false\n        };}\n\n    setStartValue = (minimum) => {\n\n        if (minimum <= 0 || minimum >= this.state.maxValue) {\n            this.setState({\n                inputSwitch: true\n            })\n        } else {\n            this.setState({\n                startValue: minimum,\n                inputSwitch: false\n            })}}\n\n    setMaxValue = (maximum) => {if ( this.state.maxValue !== this.state.startValue && this.state.maxValue > 0 )\n        {this.setState({maxValue: maximum})}\n    else {this.setState({inputSwitch: true})}};\n\n    setValue = () => {\n        this.setState({\n            inputSwitch: true,\n            buttonSwitch: false,\n            isButtonSetDisabled: true,\n            isDataSet: true,\n            newStartValue: this.state.startValue\n        })};\n\ncomponentDidMount() {this.saveState()};\n    saveState = (state) => {localStorage.setItem('state', JSON.stringify(state))}\n\n    addValue = (values) => {if (this.state.newStartValue < this.state.maxValue)\n        {this.setState({\n            newStartValue: Number(this.state.newStartValue) + 1,\n            buttonSwitch: false})}\n    else {this.setState({buttonSwitch: true})}}\n\n    deleteValue = () => {\n        this.setState({newStartValue: this.state.startValue, buttonSwitch: true});};\n\n    activateEditMode =()=> {\n            this.setState({buttonSwitch: true});\n        }\n\n        deactivatedEditMode =()=> {if (this.state.newStartValue === this.state.maxValue)\n            {this.setState({buttonSwitch: false})};\n        }\n\n   // reset\n\n    render() {\n       let invalidValue = this.state.inputSwitch ? 'mistake': '';\n        return (\n            <div className='wrapper'>\n                <div className='menu'>\n                    <Menu setStartValue={this.setStartValue}\n                          setMaxValue={this.setMaxValue}\n                          startData={this.state.startValue}\n                          maxData={this.state.maxValue}\n                          invalidValue={invalidValue}\n                          setValue={this.setValue}\n                          isButtonSetDisabled={this.state.isButtonSetDisabled}\n                    />\n                    {/*<ButtonS setData={this.setValue} title={this.state.title[0]}*/}\n                    {/*         switch={this.state.buttonSwitch} isButtonSetDisabled={this.state.isButtonSetDisabled}/>*/}\n                </div>\n                <div className='display'>\n                    <Display startDisplay={this.state.newStartValue} isDataSet={this.state.isDataSet}/>\n                    <div className='button'>\n                        <span>\n                            <ButtonS setData={this.addValue} title={this.state.title[1]}\n                                     switch={this.state.buttonSwitch} isButtonSetDisabled={this.state.isButtonSetDisabled}/>\n                        </span>\n                        <span>\n                            <ButtonS setData={this.deleteValue} title={this.state.title[2]}\n                                     switch={this.state.buttonSwitch} isButtonSetDisabled={this.state.isButtonSetDisabled}/>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}