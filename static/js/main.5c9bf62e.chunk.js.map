{"version":3,"sources":["comps/Menu.jsx","comps/Display.jsx","comps/Button.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Menu","props","className","type","onChange","event","newValue","currentTarget","value","setMaxValue","disabled","maxInputSwitch","maxData","invalidMaxValue","Number","setStartValue","startInputSwitch","startData","invalidStartValue","Display","invalidDisplayValues","setSwitch","startDisplay","Button","switch","onClick","setData","title","App","newStartValue","minimum","setState","startValue","state","maxValue","saveState","maximum","setValue","upSwitch","resetSwitch","stateToString","JSON","stringify","localStorage","setItem","restoreState","stringToState","getItem","parse","addValue","deleteValue","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5c9bf62e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Menu = (props) => {\r\n\r\n    let changeStartValue = (event) => {\r\n        let value = Number(event.currentTarget.value);\r\n        props.setStartValue(value);\r\n    };\r\n\r\n    let changeMaxValue = (event) => {\r\n        let newValue = event.currentTarget.value;\r\n        props.setMaxValue(newValue);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <span className='button'>max value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeMaxValue}\r\n                       disabled={props.maxInputSwitch}\r\n                       value={props.maxData}\r\n                       className={props.invalidMaxValue}/>\r\n            </div>\r\n            <span className='button'>start value:</span>\r\n            <div>\r\n                <input type=\"number\"\r\n                       onChange={changeStartValue}\r\n                       disabled={props.startInputSwitch}\r\n                       value={props.startData}\r\n                       className={props.invalidStartValue}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\nexport default Menu;","import React from 'react';\r\n\r\nconst Display = (props) => {\r\n\r\n    return (\r\n        <div className='text'>\r\n            <div className={props.invalidDisplayValues}>\r\n                {props.startData <= 0 || props.maxData <= 0 || props.startData >= props.maxData || props.maxData <= props.startData\r\n                    ? <span className='displayError'> incorrect values </span>\r\n                    : props.setSwitch\r\n                        ? <span> {props.startDisplay} </span>\r\n                        : <span> set values please</span>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Display;","import React from 'react';\r\n\r\nconst Button = (props) => {\r\n\r\n    return (\r\n        <button className=\"button\" disabled={props.switch} onClick={props.setData}>\r\n            {props.title}\r\n        </button>\r\n    );\r\n};\r\nexport default Button;","import React from 'react';\r\nimport './App.css';\r\nimport Menu from \"./comps/Menu\";\r\nimport Display from \"./comps/Display\";\r\nimport Button from \"./comps/Button\";\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            startValue: 0,\r\n            maxValue: 5,\r\n            startInputSwitch: false,\r\n            maxInputSwitch: false,\r\n            setSwitch: false,\r\n            upSwitch: true,\r\n            resetSwitch: false,\r\n            invalidDisplayValues: false\r\n        };\r\n    }\r\n\r\n    newStartValue = 0;\r\n\r\n    setStartValue = (minimum) => {\r\n        this.setState({\r\n                startValue: minimum,\r\n                startInputSwitch: false,\r\n                setSwitch: false,\r\n                maxInputSwitch: false,\r\n                invalidDisplayValues: false,\r\n            },\r\n            () => {\r\n                if (this.state.startValue <= 0 || this.state.maxValue <= 0 || this.state.startValue >= this.state.maxValue) {\r\n                    this.setState({\r\n                        startInputSwitch: true,\r\n                        setSwitch: true,\r\n                    }, () => this.saveState())\r\n                } else {\r\n                    this.saveState()\r\n                }\r\n            })\r\n    };\r\n\r\n    setMaxValue = (maximum) => {\r\n        this.setState({\r\n                maxValue: maximum,\r\n                setSwitch: false,\r\n                maxInputSwitch: false,\r\n                startInputSwitch: false,\r\n                invalidDisplayValues: false,\r\n            },\r\n            () => {\r\n                if (this.state.maxValue <= 0 || this.state.startValue <= 0 || this.state.maxValue <= this.state.startValue) {\r\n                    this.setState({\r\n                        maxInputSwitch: true,\r\n                        setSwitch: true\r\n                    }, () => this.saveState())\r\n                } else {\r\n                    this.saveState()\r\n                }\r\n            })\r\n    };\r\n\r\n\r\n    setValue = () => {\r\n        this.setState({\r\n            upSwitch: false,\r\n            resetSwitch: false,\r\n            setSwitch: true,\r\n            newStartValue: this.state.startValue\r\n        }, () => {\r\n            this.saveState()\r\n        })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.restoreState()\r\n    };\r\n\r\n    saveState = () => {\r\n        let stateToString = JSON.stringify(this.state);\r\n        localStorage.setItem('store', stateToString)\r\n    };\r\n\r\n    restoreState = () => {\r\n        let state = {}, stringToState = localStorage.getItem('store');\r\n        if (stringToState != null) {\r\n            state = JSON.parse(stringToState)\r\n        }\r\n        this.setState(state)\r\n    };\r\n\r\n    addValue = () => {\r\n        this.setState({\r\n                invalidDisplayValues: false,\r\n                newStartValue: Number(this.state.newStartValue) + 1,\r\n                upSwitch: false,\r\n            },\r\n            () => {\r\n                if (this.state.newStartValue >= this.state.maxValue) {\r\n                    this.setState({\r\n                            upSwitch: true,\r\n                            invalidDisplayValues: true,\r\n                        }\r\n                    )\r\n                } else {\r\n                    this.saveState()\r\n                }\r\n            })\r\n    };\r\n\r\n    deleteValue = () => {\r\n        this.setState({\r\n            startValue: 1,\r\n            maxValue: 3,\r\n            upSwitch: true,\r\n            startInputSwitch: false,\r\n            maxInputSwitch: false,\r\n            setSwitch: false,\r\n            newStartValue: this.state.startValue,\r\n            invalidDisplayValues: false\r\n        }, () => {\r\n            this.saveState()\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let invalidMaxValue = this.state.maxInputSwitch ? 'maxError' : '';\r\n        let invalidStartValue = this.state.startInputSwitch ? 'startError' : '';\r\n        let invalidDisplayValues = this.state.invalidDisplayValues ? 'displayError' : '';\r\n        return (\r\n            <div className='wrapper'>\r\n                <div className='menu'>\r\n                    <Menu setStartValue={this.setStartValue}\r\n                          setMaxValue={this.setMaxValue}\r\n                          startData={this.state.startValue}\r\n                          maxData={this.state.maxValue}\r\n                          invalidMaxValue={invalidMaxValue}\r\n                          invalidStartValue={invalidStartValue}\r\n                          startInputSwitch={this.state.startInputSwitch}\r\n                          maxInputSwitch={this.state.maxInputSwitch}/>\r\n\r\n                    <Button setData={this.setValue} title='SET'\r\n                            switch={this.state.setSwitch}/>\r\n                </div>\r\n                <div className='display'>\r\n\r\n                    <Display startDisplay={this.state.newStartValue}\r\n                             setSwitch={this.state.setSwitch}\r\n                             invalidDisplayValues={invalidDisplayValues}\r\n                             startData={this.state.startValue}\r\n                             maxData={this.state.maxValue}\r\n                    />\r\n\r\n                    <div className='displayButton'>\r\n                        <Button setData={this.addValue} title='UP'\r\n                                switch={this.state.upSwitch}/>\r\n\r\n                        <Button setData={this.deleteValue} title='RESET'\r\n                                switch={this.state.resetSwitch}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render\r\n(<App/>,\r\n    document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}